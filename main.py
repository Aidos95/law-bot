# main.py —Å –ø–æ–ª–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å—é (GigaChat, —à–∞–±–ª–æ–Ω—ã, –æ–ø–ª–∞—Ç–∞, email, PDF, Excel, WebApp, –∞–¥–º–∏–Ω–∫–∞)
import logging
import os
from dotenv import load_dotenv
load_dotenv()
import smtplib
import sqlite3
import requests
from datetime import datetime
from email.message import EmailMessage
from docx2pdf import convert
import xlsxwriter
from pydrive.auth import GoogleAuth
from pydrive.drive import GoogleDrive
from aiogram import Bot, Dispatcher, F
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton, InputFile, WebAppInfo, FSInputFile
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotSettings
from aiogram.fsm.storage.memory import MemoryStorage
BOT_TOKEN = os.getenv("BOT_TOKEN")
bot = Bot(
    token=BOT_TOKEN,
    default=DefaultBotSettings(parse_mode=ParseMode.HTML)
)
import asyncio
from dotenv import load_dotenv

# ===== –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ =====
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s [%(levelname)s] %(message)s",
    handlers=[
        logging.FileHandler("bot.log", encoding="utf-8"),
        logging.StreamHandler()
    ]
)

# ===== –ù–∞—Å—Ç—Ä–æ–π–∫–∏ =====
load_dotenv()
BOT_TOKEN = "7947746152:AAGtLCKdA9FjXTio6d6in2Q2YDkcwt2Px5E"
GIGACHAT_TOKEN = "YWZhZTZlYWUtZjQ2NC00OWYzLTg2N2QtZGQ5ODYyYjM4NGVlOmJlM2FkNzFkLWY1ZDEtNDlkZS1hNmU0LTQ3NTBlOWJiMzRiNg=="
EMAIL_LOGIN = "kuralbaev777@mail.ru"
EMAIL_PASSWORD = "@&$os125"
KASPI_CARD = "4400430241005559"
ADMIN_IDS = list(map(int, os.getenv("ADMIN_IDS", "123456789").split(",")))
MODERATION_FORBIDDEN = ["–æ—Å–∫–æ—Ä–±–ª–µ–Ω–∏–µ", "—É–≥—Ä–æ–∑–∞", "—ç–∫—Å—Ç—Ä–µ–º–∏–∑–º"]

# ===== –ë–î =====
db = sqlite3.connect("db.sqlite3")
db.execute("CREATE TABLE IF NOT EXISTS requests (id INTEGER PRIMARY KEY, user_id INTEGER, template TEXT, created_at TEXT)")
db.execute("CREATE TABLE IF NOT EXISTS users (id INTEGER PRIMARY KEY, tg_id INTEGER, phone TEXT, created_at TEXT)")
db.execute("CREATE TABLE IF NOT EXISTS payments (id INTEGER PRIMARY KEY, user_id INTEGER, file_path TEXT, status TEXT DEFAULT 'pending', created_at TEXT)")
db.commit()

# ===== –ë–æ—Ç =====
bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher(storage=MemoryStorage())

# ===== –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ =====
main_kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üìÑ –®–∞–±–ª–æ–Ω—ã")],
        [KeyboardButton(text="üí¨ –í–æ–ø—Ä–æ—Å —é—Ä–∏—Å—Ç—É")],
        [KeyboardButton(text="üìë –ú–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ", web_app=WebAppInfo(url="https://example.com/webapp"))],
        [KeyboardButton(text="üìß –ü–æ–ª—É—á–∏—Ç—å –ø–æ Email")],
        [KeyboardButton(text="üßæ PDF –∏ Excel –æ—Ç—á—ë—Ç")]
    ],
    resize_keyboard=True
)

# ===== –ö–æ–º–∞–Ω–¥—ã =====
@dp.message(F.text == "/start")
async def cmd_start(message: Message):
    await message.answer("üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Æ—Ä–∏—Å—Ç-–±–æ—Ç!\n–ü–æ–ª—É—á–∏—Ç–µ —à–∞–±–ª–æ–Ω—ã, –∑–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å —é—Ä–∏—Å—Ç—É –∏–ª–∏ –æ–ø–ª–∞—Ç–∏—Ç–µ Kaspi:", reply_markup=main_kb)

@dp.message(F.text == "/admin")
async def cmd_admin(message: Message):
    if message.from_user.id in ADMIN_IDS:
        await message.answer("üîê –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å: –¥–æ—Å—Ç—É–ø –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω.")
    else:
        await message.answer("‚õî –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")

@dp.message(F.text == "/pay")
async def cmd_pay(message: Message):
    await message.answer(f"üí≥ –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —à–∞–±–ª–æ–Ω–∞ –ø–µ—Ä–µ–≤–µ–¥–∏—Ç–µ 2000‚Ç∏ –Ω–∞ Kaspi: <b>{KASPI_CARD}</b> –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω.")

# ===== –û—Ç–≤–µ—Ç –ò–ò =====
@dp.message(F.text & ~F.text.startswith("/"))
async def handle_question(message: Message):
    if not check_moderation(message.text):
        await message.answer("‚ö†Ô∏è –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞—Ä—É—à–∞–µ—Ç –ø—Ä–∞–≤–∏–ª–∞. –ü–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π—Ç–µ.")
        return
    await message.answer("ü§ñ –î—É–º–∞—é...")
    try:
        response = ask_gigachat(message.text)
        await message.answer(response)
        save_request(message.from_user.id, message.text)
    except Exception as e:
        logging.exception(e)
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ GigaChat: {str(e)}")

# ===== –ú–æ–¥–µ—Ä–∞—Ü–∏—è =====
def check_moderation(text):
    for word in MODERATION_FORBIDDEN:
        if word.lower() in text.lower():
            return False
    return True

# ===== GigaChat API =====
def ask_gigachat(prompt):
    url = "https://gigachat.devices.sberbank.ru/api/v1/chat/completions"
    headers = {
        "Authorization": f"Bearer {GIGACHAT_TOKEN}",
        "Content-Type": "application/json"
    }
    payload = {
        "model": "GigaChat:latest",
        "messages": [{"role": "user", "content": prompt}]
    }
    response = requests.post(url, headers=headers, json=payload, verify=False)
    try:
        result = response.json()
        if "choices" in result:
            return result["choices"][0]["message"]["content"]
        elif "detail" in result:
            return f"‚ö†Ô∏è GigaChat –æ—Ç–≤–µ—Ç–∏–ª: {result['detail']}"
        elif "error" in result:
            return f"‚ùå –û—à–∏–±–∫–∞ GigaChat: {result['error']}"
        else:
            return f"‚ö†Ô∏è –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç GigaChat: {result}"
    except Exception as e:
        return f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–æ—Ä–µ –æ—Ç–≤–µ—Ç–∞ GigaChat: {str(e)}"

# ===== –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ =====
def save_request(user_id, text):
    db.execute("INSERT INTO requests (user_id, template, created_at) VALUES (?, ?, ?)", (user_id, text, datetime.now().isoformat()))
    db.commit()

# ===== –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ =====
async def main():
    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    await dp.start_polling(bot)

if __name__ == '__main__':
    asyncio.run(main())
